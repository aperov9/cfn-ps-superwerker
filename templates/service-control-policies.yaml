AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Sets up Service Control Policies(SCP). (qs-1s3rsr7o0)
Parameters:
  IncludeSecurityHub:
    AllowedValues:
      - true
      - false
    Type: String
  IncludeBackup:
    AllowedValues:
      - true
      - false
    Type: String
Conditions:
  IncludeSecurityHub:
    Fn::Equals:
      - Ref: IncludeSecurityHub
      - true
  IncludeBackup:
    Fn::Equals:
      - Ref: IncludeBackup
      - true
  RolloutSCPs:
    Fn::And:
      - Fn::Equals:
          - Ref: IncludeSecurityHub
          - true
      - Fn::Equals:
          - Ref: IncludeBackup
          - true
Resources:
  SCPBaseline:
    Type: AWS::CloudFormation::CustomResource
    Condition: RolloutSCPs
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - SCPCustomResource
          - Arn
      Policy:
        Fn::Sub:
          - "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        ${Statements}\n    ]\n}\n"
          - Statements:
              Fn::Join:
                - ','
                - - Fn::If:
                      - IncludeSecurityHub
                      - Fn::Sub: "{\n    \"Condition\": {\n        \"ArnNotLike\": {\n            \"aws:PrincipalARN\": \"arn:${AWS::Partition}:iam::*:role/AWSControlTowerExecution\"\n        }\n    },\n\
                          \    \"Action\": [\n        \"securityhub:DeleteInvitations\",\n        \"securityhub:DisableSecurityHub\",\n        \"securityhub:DisassociateFromMasterAccount\",\n        \"\
                          securityhub:DeleteMembers\",\n        \"securityhub:DisassociateMembers\"\n    ],\n    \"Resource\": [\n        \"*\"\n    ],\n    \"Effect\": \"Deny\",\n    \"Sid\": \"SWProtectSecurityHub\"\
                          \n}\n"
                      - Ref: AWS::NoValue
                  - Fn::If:
                      - IncludeBackup
                      - Fn::Sub: "{\n    \"Condition\": {\n        \"ArnNotLike\": {\n            \"aws:PrincipalARN\": \"arn:${AWS::Partition}:iam::*:role/stacksets-exec-*\"\n        }\n    },\n    \"\
                          Action\": [\n        \"iam:AttachRolePolicy\",\n        \"iam:CreateRole\",\n        \"iam:DeleteRole\",\n        \"iam:DeleteRolePermissionsBoundary\",\n        \"iam:DeleteRolePolicy\"\
                          ,\n        \"iam:DetachRolePolicy\",\n        \"iam:PutRolePermissionsBoundary\",\n        \"iam:PutRolePolicy\",\n        \"iam:UpdateAssumeRolePolicy\",\n        \"iam:UpdateRole\"\
                          ,\n        \"iam:UpdateRoleDescription\"\n    ],\n    \"Resource\": [\n        \"arn:${AWS::Partition}:iam::*:role/service-role/AWSBackupDefaultServiceRole\",\n        \"arn:${AWS::Partition}:iam::*:role/SuperwerkerBackupTagsEnforcementRemediationRole\"\
                          \n    ],\n    \"Effect\": \"Deny\",\n    \"Sid\": \"SWProtectBackup\"\n}\n"
                      - Ref: AWS::NoValue
      Attach: true
  SCPCustomResource:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 200
      Runtime: python3.7
      Handler: index.handler
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - organizations:CreatePolicy
                - organizations:UpdatePolicy
                - organizations:DeletePolicy
                - organizations:AttachPolicy
                - organizations:DetachPolicy
                - organizations:ListRoots
                - organizations:ListPolicies
                - organizations:ListPoliciesForTarget
              Resource: '*'
      InlineCode: "import boto3\nimport cfnresponse\nimport time\nimport random\n import re\n\no = boto3.client(\"organizations\")\n\nCREATE = 'Create'\nUPDATE = 'Update'\nDELETE = 'Delete'\nSCP = \"SERVICE_CONTROL_POLICY\"\
        \n\n\ndef root():\n    return o.list_roots()['Roots'][0]\n\n\ndef root_id():\n    return root()['Id']\n \ndef exception_handling(function):\n    def catch(event, context):\n        try:\n      \
        \      function(event, context)\n        except Exception as e:\n            print(e)\n            print(event)\n            cfnresponse.send(event, context, cfnresponse.FAILED, {})\n\n    return\
        \ catch\n\ndef with_retry(function, **kwargs):\n    for i in [0, 3, 9, 15, 30]:\n        # Random sleep to not run into concurrency problems when adding or attaching multiple SCPs\n        # They\
        \ have to be added/updated/deleted one after the other\n        sleeptime = i + random.randint(0, 5)\n        print('Running {} with Sleep of {}'.format(function.__name__, sleeptime))\n        time.sleep(sleeptime)\n\
        \        try:\n            response = function(**kwargs)\n            print(\"Response for {}: {}\".format(function.__name__, response))\n            return response\n        except o.exceptions.ConcurrentModificationException\
        \ as e:\n            print('Exception: {}'.format(e))\n    raise Exception\n\ndef handler(event, context):\n    RequestType = event[\"RequestType\"]\n    Properties = event[\"ResourceProperties\"\
        ]\n    LogicalResourceId = event[\"LogicalResourceId\"]\n    PhysicalResourceId = event.get(\"PhysicalResourceId\")\n    Policy = Properties[\"Policy\"]\n    Attach = Properties[\"Attach\"] == 'true'\n\
        \n    print('RequestType: {}'.format(RequestType))\n    print('PhysicalResourceId: {}'.format(PhysicalResourceId))\n    print('LogicalResourceId: {}'.format(LogicalResourceId))\n    print('Attach:\
        \ {}'.format(Attach))\n\n    parameters = dict(\n        Content=Policy,\n        Description=\"superwerker - {}\".format(LogicalResourceId),\n        Name=\"superwerker\",\n    )\n\n    policy_id\
        \ = PhysicalResourceId\n\n    try:\n      if RequestType == CREATE:\n          print('Creating Policy: {}'.format(LogicalResourceId))\n          response = with_retry(o.create_policy,\n        \
        \                        **parameters, Type=SCP\n                                )\n          policy_id = response[\"Policy\"][\"PolicySummary\"][\"Id\"]\n          if Attach:\n              with_retry(o.attach_policy,\
        \ PolicyId=policy_id, TargetId=root_id())\n      elif RequestType == UPDATE:\n          print('Updating Policy: {}'.format(LogicalResourceId))\n          with_retry(o.update_policy, PolicyId=policy_id,\
        \ **parameters)\n      elif RequestType == DELETE:\n          print('Deleting Policy: {}'.format(LogicalResourceId))\n          # Same as above\n          if re.match('p-[0-9a-z]+', policy_id):\n\
        \              if policy_attached(policy_id):\n                  with_retry(o.detach_policy, PolicyId=policy_id, TargetId=root_id())\n              with_retry(o.delete_policy, PolicyId=policy_id)\n\
        \          else:\n              print('{} is no valid PolicyId'.format(policy_id))\n      else:\n          raise Exception('Unexpected RequestType: {}'.format(RequestType))\n\n      cfnresponse.send(event,\
        \ context, cfnresponse.SUCCESS, {}, policy_id)\n    except Exception as e:\n        print(e)\n        print(event)\n        cfnresponse.send(event, context, cfnresponse.FAILED, {}, policy_id)\n\n\
        def policy_attached(policy_id):\n    return [p['Id'] for p in\n            o.list_policies_for_target(TargetId=root_id(), Filter='SERVICE_CONTROL_POLICY')['Policies'] if\n            p['Id'] ==\
        \ policy_id]\n\n\ndef policy_attached(policy_id):\n    return [p['Id'] for p in\n            o.list_policies_for_target(TargetId=root_id(), Filter='SERVICE_CONTROL_POLICY')['Policies'] if\n    \
        \        p['Id'] == policy_id]\n"
  SCPEnable:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - SCPEnableCustomResource
          - Arn
  SCPEnableCustomResource:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 200
      Handler: index.enable_service_control_policies
      Runtime: python3.7
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - organizations:EnablePolicyType
                - organizations:DisablePolicyType
                - organizations:ListRoots
              Resource: '*'
      InlineCode: "import boto3\nimport cfnresponse\nimport time\nimport random\n import re\n\no = boto3.client(\"organizations\")\n\nCREATE = 'Create'\nUPDATE = 'Update'\nDELETE = 'Delete'\nSCP = \"SERVICE_CONTROL_POLICY\"\
        \n\n\ndef root():\n    return o.list_roots()['Roots'][0]\n\n\ndef root_id():\n    return root()['Id']\n \n\ndef scp_enabled():\n    enabled_policies = root()['PolicyTypes']\n    return {\"Type\"\
        : SCP, \"Status\": \"ENABLED\"} in enabled_policies\n\n\n def exception_handling(function):\n    def catch(event, context):\n        try:\n            function(event, context)\n        except Exception\
        \ as e:\n            print(e)\n            print(event)\n            cfnresponse.send(event, context, cfnresponse.FAILED, {})\n\n    return catch\n\n\n@exception_handling\n def enable_service_control_policies(event,\
        \ context):\n    RequestType = event[\"RequestType\"]\n    if RequestType == CREATE and not scp_enabled():\n        r_id = root_id()\n        print('Enable SCP for root: {}'.format(r_id))\n    \
        \    o.enable_policy_type(RootId=r_id, PolicyType=SCP)\n    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, 'SCP')\n\n\ndef with_retry(function, **kwargs):\n    for i in [0, 3, 9, 15,\
        \ 30]:\n        # Random sleep to not run into concurrency problems when adding or attaching multiple SCPs\n        # They have to be added/updated/deleted one after the other\n        sleeptime\
        \ = i + random.randint(0, 5)\n        print('Running {} with Sleep of {}'.format(function.__name__, sleeptime))\n        time.sleep(sleeptime)\n        try:\n            response = function(**kwargs)\n\
        \            print(\"Response for {}: {}\".format(function.__name__, response))\n            return response\n        except o.exceptions.ConcurrentModificationException as e:\n            print('Exception:\
        \ {}'.format(e))\n    raise Exception\n"
Metadata:
  SuperwerkerVersion: 0.13.2
  cfn-lint:
    config:
      ignore_checks:
        - E9007
        - EIAMPolicyWildcardResource
Outputs: {}
